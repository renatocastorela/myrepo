// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package org.oiga.model.builders;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.oiga.model.entities.Adress;
import org.oiga.model.entities.Event;
import org.oiga.model.entities.EventCategory;
import org.oiga.model.entities.Interaction;
import org.oiga.model.entities.Interaction.State;
import org.oiga.model.entities.Repository;
import org.oiga.model.entities.Role;
import org.oiga.model.entities.SimpleVenue;
import org.oiga.model.entities.Tag;
import org.oiga.model.entities.User;

public class UserBuilder extends UserBuilderBase<UserBuilder> {
	public static UserBuilder user() {
		return new UserBuilder();
	}

	public UserBuilder() {
		super(new User());
	}

	public User build() {
		return getInstance();
	}
}

class UserBuilderBase<GeneratorT extends UserBuilderBase<GeneratorT>> {
	private User instance;

	protected UserBuilderBase(User aInstance) {
		instance = aInstance;
	}

	protected User getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withFacebookUsername(String aValue) {
		instance.setFacebookUsername(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withFacebookUid(String aValue) {
		instance.setFacebookUid(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withFacebookThirdPartyId(String aValue) {
		instance.setFacebookThirdPartyId(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withNodeId(Long aValue) {
		instance.setNodeId(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withEmail(String aValue) {
		instance.setEmail(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withFirstName(String aValue) {
		instance.setFirstName(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withLastName(String aValue) {
		instance.setLastName(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withPassword(String aValue) {
		instance.setPassword(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withSignInProvider(String aValue) {
		instance.setSignInProvider(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withRole(Role aValue) {
		instance.setRole(aValue);

		return (GeneratorT) this;
	}

	public RoleRoleBuilder withRole() {
		Role obj = new Role();

		withRole(obj);

		return new RoleRoleBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withImageUrl(String aValue) {
		instance.setImageUrl(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withInteractions(Set<Interaction> aValue) {
		instance.setInteractions(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedInteraction(Interaction aValue) {
		if (instance.getInteractions() == null) {
			instance.setInteractions(new HashSet<Interaction>());
		}

		((HashSet<Interaction>) instance.getInteractions()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedInteractionInteractionBuilder withAddedInteraction() {
		Interaction obj = new Interaction();

		withAddedInteraction(obj);

		return new AddedInteractionInteractionBuilder(obj);
	}

	public class RoleRoleBuilder extends RoleBuilderBase<RoleRoleBuilder> {
		public RoleRoleBuilder(Role aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endRole() {
			return (GeneratorT) UserBuilderBase.this;
		}
	}

	public class AddedInteractionInteractionBuilder extends
			InteractionBuilderBase<AddedInteractionInteractionBuilder> {
		public AddedInteractionInteractionBuilder(Interaction aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endInteraction() {
			return (GeneratorT) UserBuilderBase.this;
		}
	}

	public static class InteractionBuilderBase<GeneratorT extends InteractionBuilderBase<GeneratorT>> {
		private Interaction instance;

		protected InteractionBuilderBase(Interaction aInstance) {
			instance = aInstance;
		}

		protected Interaction getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withLiked(Boolean aValue) {
			instance.setLiked(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withViews(Integer aValue) {
			instance.setViews(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withLastInteraction(Date aValue) {
			instance.setLastInteraction(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withState(State aValue) {
			instance.setState(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withEvent(Event aValue) {
			instance.setEvent(aValue);

			return (GeneratorT) this;
		}

		public EventEventBuilder withEvent() {
			Event obj = new Event();

			withEvent(obj);

			return new EventEventBuilder(obj);
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) InteractionBuilderBase.this;
			}
		}

		public class EventEventBuilder extends
				EventBuilderBase<EventEventBuilder> {
			public EventEventBuilder(Event aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endEvent() {
				return (GeneratorT) InteractionBuilderBase.this;
			}
		}
	}

	public static class EventBuilderBase<GeneratorT extends EventBuilderBase<GeneratorT>> {
		private Event instance;

		protected EventBuilderBase(Event aInstance) {
			instance = aInstance;
		}

		protected Event getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withPicture(String aValue) {
			instance.setPicture(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAudience(String aValue) {
			instance.setAudience(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTicketPrices(String aValue) {
			instance.setTicketPrices(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withInteractions(Set<Interaction> aValue) {
			instance.setInteractions(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedInteraction(Interaction aValue) {
			if (instance.getInteractions() == null) {
				instance.setInteractions(new HashSet<Interaction>());
			}

			((HashSet<Interaction>) instance.getInteractions()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedInteractionInteractionBuilder withAddedInteraction() {
			Interaction obj = new Interaction();

			withAddedInteraction(obj);

			return new AddedInteractionInteractionBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withOtherDetails(List<String> aValue) {
			instance.setOtherDetails(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedOtherDetail(String aValue) {
			if (instance.getOtherDetails() == null) {
				instance.setOtherDetails(new ArrayList<String>());
			}

			((ArrayList<String>) instance.getOtherDetails()).add(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNodeId(Long aValue) {
			instance.setNodeId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUrl(String aValue) {
			instance.setUrl(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withHost(String aValue) {
			instance.setHost(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withLocationAdress(String aValue) {
			instance.setLocationAdress(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withHoursDetails(String aValue) {
			instance.setHoursDetails(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStartDate(Date aValue) {
			instance.setStartDate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withEndDate(Date aValue) {
			instance.setEndDate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUpdatedTime(Date aValue) {
			instance.setUpdatedTime(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withVenue(SimpleVenue aValue) {
			instance.setVenue(aValue);

			return (GeneratorT) this;
		}

		public VenueSimpleVenueBuilder withVenue() {
			SimpleVenue obj = new SimpleVenue();

			withVenue(obj);

			return new VenueSimpleVenueBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCategories(Set<EventCategory> aValue) {
			instance.setCategories(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedCategory(EventCategory aValue) {
			if (instance.getCategories() == null) {
				instance.setCategories(new HashSet<EventCategory>());
			}

			((HashSet<EventCategory>) instance.getCategories()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedCategoryEventCategoryBuilder withAddedCategory() {
			EventCategory obj = new EventCategory();

			withAddedCategory(obj);

			return new AddedCategoryEventCategoryBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTags(Set<Tag> aValue) {
			instance.setTags(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedTag(Tag aValue) {
			if (instance.getTags() == null) {
				instance.setTags(new HashSet<Tag>());
			}

			((HashSet<Tag>) instance.getTags()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedTagTagBuilder withAddedTag() {
			Tag obj = new Tag();

			withAddedTag(obj);

			return new AddedTagTagBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withHours(List<String> aValue) {
			instance.setHours(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedHour(String aValue) {
			if (instance.getHours() == null) {
				instance.setHours(new ArrayList<String>());
			}

			((ArrayList<String>) instance.getHours()).add(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withLocation(String aValue) {
			instance.setLocation(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withRepository(Repository aValue) {
			instance.setRepository(aValue);

			return (GeneratorT) this;
		}

		public RepositoryRepositoryBuilder withRepository() {
			Repository obj = new Repository();

			withRepository(obj);

			return new RepositoryRepositoryBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExternalId(String aValue) {
			instance.setExternalId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDates(List<Long> aValue) {
			instance.setDates(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedDate(Long aValue) {
			if (instance.getDates() == null) {
				instance.setDates(new ArrayList<Long>());
			}

			((ArrayList<Long>) instance.getDates()).add(aValue);

			return (GeneratorT) this;
		}

		public class AddedInteractionInteractionBuilder extends
				InteractionBuilderBase<AddedInteractionInteractionBuilder> {
			public AddedInteractionInteractionBuilder(Interaction aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endInteraction() {
				return (GeneratorT) EventBuilderBase.this;
			}
		}

		public class VenueSimpleVenueBuilder extends
				SimpleVenueBuilderBase<VenueSimpleVenueBuilder> {
			public VenueSimpleVenueBuilder(SimpleVenue aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endVenue() {
				return (GeneratorT) EventBuilderBase.this;
			}
		}

		public class AddedCategoryEventCategoryBuilder extends
				EventCategoryBuilderBase<AddedCategoryEventCategoryBuilder> {
			public AddedCategoryEventCategoryBuilder(EventCategory aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endCategory() {
				return (GeneratorT) EventBuilderBase.this;
			}
		}

		public class AddedTagTagBuilder extends
				TagBuilderBase<AddedTagTagBuilder> {
			public AddedTagTagBuilder(Tag aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endTag() {
				return (GeneratorT) EventBuilderBase.this;
			}
		}

		public class RepositoryRepositoryBuilder extends
				RepositoryBuilderBase<RepositoryRepositoryBuilder> {
			public RepositoryRepositoryBuilder(Repository aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endRepository() {
				return (GeneratorT) EventBuilderBase.this;
			}
		}
	}

	public static class EventCategoryBuilderBase<GeneratorT extends EventCategoryBuilderBase<GeneratorT>> {
		private EventCategory instance;

		protected EventCategoryBuilderBase(EventCategory aInstance) {
			instance = aInstance;
		}

		protected EventCategory getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withIcon(String aValue) {
			instance.setIcon(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNodeId(Long aValue) {
			instance.setNodeId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withColor(String aValue) {
			instance.setColor(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withSubcategories(Set<EventCategory> aValue) {
			instance.setSubcategories(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedSubcategory(EventCategory aValue) {
			if (instance.getSubcategories() == null) {
				instance.setSubcategories(new HashSet<EventCategory>());
			}

			((HashSet<EventCategory>) instance.getSubcategories()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedSubcategoryEventCategoryBuilder withAddedSubcategory() {
			EventCategory obj = new EventCategory();

			withAddedSubcategory(obj);

			return new AddedSubcategoryEventCategoryBuilder(obj);
		}

		public class AddedSubcategoryEventCategoryBuilder extends
				EventCategoryBuilderBase<AddedSubcategoryEventCategoryBuilder> {
			public AddedSubcategoryEventCategoryBuilder(EventCategory aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endSubcategory() {
				return (GeneratorT) EventCategoryBuilderBase.this;
			}
		}
	}

	public static class RepositoryBuilderBase<GeneratorT extends RepositoryBuilderBase<GeneratorT>> {
		private Repository instance;

		protected RepositoryBuilderBase(Repository aInstance) {
			instance = aInstance;
		}

		protected Repository getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withLogo(String aValue) {
			instance.setLogo(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNodeId(Long aValue) {
			instance.setNodeId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUrl(String aValue) {
			instance.setUrl(aValue);

			return (GeneratorT) this;
		}
	}

	public static class SimpleVenueBuilderBase<GeneratorT extends SimpleVenueBuilderBase<GeneratorT>> {
		private SimpleVenue instance;

		protected SimpleVenueBuilderBase(SimpleVenue aInstance) {
			instance = aInstance;
		}

		protected SimpleVenue getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withFoursquareId(String aValue) {
			instance.setFoursquareId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAdress(Adress aValue) {
			instance.setAdress(aValue);

			return (GeneratorT) this;
		}

		public AdressAdressBuilder withAdress() {
			Adress obj = new Adress();

			withAdress(obj);

			return new AdressAdressBuilder(obj);
		}

		public class AdressAdressBuilder extends
				AdressBuilderBase<AdressAdressBuilder> {
			public AdressAdressBuilder(Adress aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endAdress() {
				return (GeneratorT) SimpleVenueBuilderBase.this;
			}
		}
	}

	public static class AdressBuilderBase<GeneratorT extends AdressBuilderBase<GeneratorT>> {
		private Adress instance;

		protected AdressBuilderBase(Adress aInstance) {
			instance = aInstance;
		}

		protected Adress getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNodeId(Long aValue) {
			instance.setNodeId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withWkt(String aValue) {
			instance.setWkt(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCountry(String aValue) {
			instance.setCountry(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCity(String aValue) {
			instance.setCity(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withState(String aValue) {
			instance.setState(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withPostalCode(String aValue) {
			instance.setPostalCode(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStreetAdress(String aValue) {
			instance.setStreetAdress(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCrossStreet(String aValue) {
			instance.setCrossStreet(aValue);

			return (GeneratorT) this;
		}
	}

	public static class RoleBuilderBase<GeneratorT extends RoleBuilderBase<GeneratorT>> {
		private Role instance;

		protected RoleBuilderBase(Role aInstance) {
			instance = aInstance;
		}

		protected Role getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}
	}

	public static class TagBuilderBase<GeneratorT extends TagBuilderBase<GeneratorT>> {
		private Tag instance;

		protected TagBuilderBase(Tag aInstance) {
			instance = aInstance;
		}

		protected Tag getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNodeId(Long aValue) {
			instance.setNodeId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withKeyword(String aValue) {
			instance.setKeyword(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCount(Integer aValue) {
			instance.setCount(aValue);

			return (GeneratorT) this;
		}
	}
}
